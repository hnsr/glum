
Compiling on *nix:

  - Install required deps: pkg-config, python, scons, nasm, gtk+, libglade, devil.
  - In the directory holding the sources, run 'scons' to compile Glum.


Compiling on Windows:
  
  On Windows MinGW and nasm are used for compilation, SCons (python-based build system) for
  building.

  - Install MinGW, nasm, Python

  - Install SCons (its setup program should pick the right install location, which should be
    somewhere under the Python installation directory)

  - To make SCons easily invocable from the command shell, add the Python installation directory and
    its Scripts subdirectory to Windows' PATH

  - Download headers and libs for required libraries (DevIL, GTK+, libglade) from 
    http://www.aphax.nl/files/glum-mingw-deps.zip

  - Download required run-time DLLS from  http://www.aphax.nl/files/glum-runtime-dlls.zip

  - Set up the paths for headers/libs and WIN_PATH in build.conf (see output of 'scons -h' for
    examples)

  - Open a command shell, change into the Glum source directory and run 'scons' to compile.

  - Copy the built executable from build/release or build/debug into the directory where the runtime
    DLLS were extracted.

  TODO: Add something about the data directory..


Notes on DevIL on Windows:

  The SDK package only includes DLLs/.exp/.lib files. It seems to get things going with MinGW some
  time ago I generated .a libraries, need to figure this out again so I can try the latest version.
  Found more info at http://devpaks.org/details.php?devpak=99, it involves using the 'reimp' program
  from mingw-utils to generate a static library (.a) from a .lib.


Tested versions:

            *nix        Windows
  Python:   2.6         2.5/2.6
  SCons:    1.0.0       1.1.0/1.0.1
  nasm:     2.03.01     2.04?
  GCC:      4.3.2       mingw-5.1.4 (installer)
  libglade: 2.6.3       ?
  DevIL:    1.6.8-rc2   ?
  GTK+:     2.14.3      ?



Build customization:

  Run 'scons -h' to get a list of variables that can be set to influence building options.

  Use them either as arguments to scons (i.e: 'scons PROFILING=1') or add them to 'build.conf':

    MARCH = 'pentium3'
    VERBOSE = '1'
    PROFILING = '1'


Profiling:

  Build with PROFILING=1, run the executable which will output gmon.out containing profiling
  information, then run 'gprof <path-to-glum-executable'.
  

Note to self: Performance impact of various GCC optimisation flags on x86 (tested with bilinear
filtering enabled):

  Without -fomit-frame-pointer  slightly slower
  Without -ffast-math           about 35-40% slower
  Without -funroll-loops        slightly *faster*
  Without -march=prescott       75% slower
  Without -O2                   60% slower


