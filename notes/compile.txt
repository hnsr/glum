
Compiling on *nix:

  - Install required deps: pkg-config, python, scons, nasm, gtk+, libglade, devil.
  - In the directory holding the sources, run 'scons' to compile Glum.


Compiling on Windows:

  On Windows, MinGW and nasm are used for compilation/assembling, and SCons (python-based build
  system) for building.

  - Install MinGW (use the 'Automated MinGW Installer' package if unsure), nasm, and Python.

    Glum's build script will automatically add 'C:\MinGW\bin' and 'C:\Program Files\nasm' to the
    PATH. If MinGW and nasm were installed somewhere else, you need to specify the right paths in
    the WIN_PATH setting in the build.conf configuration file (see output of 'scons -h' for more
    info).

  - Install SCons. Its setup program should pick the right install location, which should be
    somewhere under the Python installation directory.

    To make SCons easily invocable from the command line, add both the Python installation
    directory (i.e. C:\Python26\) and also the Scripts subdirectory (C:\Python26\Scripts\) to the
    PATH environment variable. (Right-click My Computer, Properties, Advanced tab, click Environment
    Variables).

  - Download headers and libs for required dependencies (DevIL, GTK+, libglade). For convenience,
    I've created a zip archive with everything required which can be downloaded from
    http://www.aphax.nl/files/glum-mingw-deps.zip .
    
    If the 'devil' and 'gtkstuff' directories are extracted under 'C:\MinGW' no further setup is
    required since the glum build script looks for them under that directory by default. If they are
    extracted somewhere else of if the headers/libs are installed by yourself, make sure to set the
    paths correctly in build.conf.

  - Open a command shell, change into the Glum source directory and run 'scons' to compile. Both a
    release and debug executable will be built under the 'build' subdirectory.

  - Download and extract required run-time DLLS from http://www.aphax.nl/files/glum-runtime-dlls.zip

  - Copy the built executable from build/release or build/debug into the directory where the runtime
    DLLS were extracted.


Notes on DevIL on Windows:

  The SDK package only includes DLLs/.exp/.lib files. It seems to get things going with MinGW some
  time ago I generated .a libraries, need to figure this out again so I can try the latest version.
  Found more info at http://devpaks.org/details.php?devpak=99, it involves using the 'reimp' program
  from mingw-utils to generate a static library (.a) from a .lib.


Tested versions:

            *nix        Windows
  Python:   2.6         2.5/2.6
  SCons:    1.0.0       1.1.0/1.0.1
  nasm:     2.03.01     2.04?
  GCC:      4.3.2       mingw-5.1.4 (installer)
  libglade: 2.6.3       ?
  DevIL:    1.6.8-rc2   ?
  GTK+:     2.14.3      ?



Build customization:

  Run 'scons -h' to get a list of variables that can be set to influence building options.

  Use them either as arguments to scons (i.e: 'scons PROFILING=1') or add them to 'build.conf':

    MARCH = 'pentium3'
    VERBOSE = '1'
    PROFILING = '1'


Profiling:

  Build with PROFILING=1, run the executable which will output gmon.out containing profiling
  information, then run 'gprof <path-to-glum-executable'.
  

Note to self: Performance impact of various GCC optimisation flags on x86 (tested with bilinear
filtering enabled):

  Without -fomit-frame-pointer  slightly slower
  Without -ffast-math           about 35-40% slower
  Without -funroll-loops        slightly *faster*
  Without -march=prescott       75% slower
  Without -O2                   60% slower

Tested on p3 laptop with texnearest:
  With -mfpmath=387,see     50-60% faster


